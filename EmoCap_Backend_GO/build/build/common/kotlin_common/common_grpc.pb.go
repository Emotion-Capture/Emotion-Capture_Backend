// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: common/common.proto

package kotlin_common

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommonProtoServiceClient is the client API for CommonProtoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommonProtoServiceClient interface {
	ValidateToken(ctx context.Context, in *JWTRequest, opts ...grpc.CallOption) (*JWTResponse, error)
}

type commonProtoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommonProtoServiceClient(cc grpc.ClientConnInterface) CommonProtoServiceClient {
	return &commonProtoServiceClient{cc}
}

func (c *commonProtoServiceClient) ValidateToken(ctx context.Context, in *JWTRequest, opts ...grpc.CallOption) (*JWTResponse, error) {
	out := new(JWTResponse)
	err := c.cc.Invoke(ctx, "/kotlin_common.CommonProtoService/validateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommonProtoServiceServer is the server API for CommonProtoService service.
// All implementations must embed UnimplementedCommonProtoServiceServer
// for forward compatibility
type CommonProtoServiceServer interface {
	ValidateToken(context.Context, *JWTRequest) (*JWTResponse, error)
	mustEmbedUnimplementedCommonProtoServiceServer()
}

// UnimplementedCommonProtoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommonProtoServiceServer struct {
}

func (UnimplementedCommonProtoServiceServer) ValidateToken(context.Context, *JWTRequest) (*JWTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateToken not implemented")
}
func (UnimplementedCommonProtoServiceServer) mustEmbedUnimplementedCommonProtoServiceServer() {}

// UnsafeCommonProtoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommonProtoServiceServer will
// result in compilation errors.
type UnsafeCommonProtoServiceServer interface {
	mustEmbedUnimplementedCommonProtoServiceServer()
}

func RegisterCommonProtoServiceServer(s grpc.ServiceRegistrar, srv CommonProtoServiceServer) {
	s.RegisterService(&CommonProtoService_ServiceDesc, srv)
}

func _CommonProtoService_ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JWTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonProtoServiceServer).ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kotlin_common.CommonProtoService/validateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonProtoServiceServer).ValidateToken(ctx, req.(*JWTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommonProtoService_ServiceDesc is the grpc.ServiceDesc for CommonProtoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommonProtoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kotlin_common.CommonProtoService",
	HandlerType: (*CommonProtoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "validateToken",
			Handler:    _CommonProtoService_ValidateToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common/common.proto",
}
